{
  "version": 3,
  "sources": ["../../../../../RAVI SHANKAR/Desktop/selfpractice/Assignments from Companies/Aganitha/recipe-planner/netlify/functions/llm.mjs"],
  "sourceRoot": "C:/Users/RAVISH~1/AppData/Local/Temp/tmp-9428-RK5CfVonlceu",
  "sourcesContent": ["// netlify/functions/llm.mjs\r\nexport async function handler(event, context) {\r\n  try {\r\n    if (event.httpMethod !== 'POST') {\r\n      return { statusCode: 405, body: 'Only POST allowed' };\r\n    }\r\n\r\n    // parse incoming JSON\r\n    let body;\r\n    try {\r\n      body = JSON.parse(event.body);\r\n    } catch (e) {\r\n      console.error('Invalid JSON body:', event.body);\r\n      return { statusCode: 400, body: JSON.stringify({ status: 'error', error: 'Invalid JSON' }) };\r\n    }\r\n\r\n    const { prompt } = body;\r\n    if (!prompt) {\r\n      return { statusCode: 400, body: JSON.stringify({ status: 'error', error: 'Missing prompt' }) };\r\n    }\r\n\r\n    // <<< CORRECT upstream endpoint & payload >>>\r\n    const apiUrl = 'https://apifreellm.com/api/chat';\r\n    const apiKey = process.env.APIFREE_KEY || ''; // optional\r\n\r\n    console.log('Proxy: calling', apiUrl, 'with prompt preview:', String(prompt).slice(0, 200));\r\n    const headers = { 'Content-Type': 'application/json' };\r\n    if (apiKey) headers['Authorization'] = `Bearer ${apiKey}`;\r\n\r\n    const apiRes = await fetch(apiUrl, {\r\n      method: 'POST',\r\n      headers,\r\n      body: JSON.stringify({ message: prompt }),\r\n    });\r\n\r\n    // ApiFreeLLM returns JSON with { status, response, error, retry_after }\r\n    const text = await apiRes.text();\r\n    console.log('Upstream status:', apiRes.status, 'body-preview:', text.slice(0, 1000));\r\n\r\n    let js;\r\n    try {\r\n      js = JSON.parse(text);\r\n    } catch {\r\n      // If upstream returns HTML or non-JSON, forward as error\r\n      return { statusCode: 502, body: JSON.stringify({ status: 'error', error: 'Upstream returned non-JSON', raw: text.slice(0, 2000) }) };\r\n    }\r\n\r\n    // Forward upstream JSON unchanged (keeps status field)\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify(js),\r\n    };\r\n\r\n  } catch (err) {\r\n    console.error('Proxy error:', err);\r\n    return { statusCode: 500, body: JSON.stringify({ status: 'error', error: String(err) }) };\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,eAAsB,QAAQ,OAAO,SAAS;AAC5C,MAAI;AACF,QAAI,MAAM,eAAe,QAAQ;AAC/B,aAAO,EAAE,YAAY,KAAK,MAAM,oBAAoB;AAAA,IACtD;AAGA,QAAI;AACJ,QAAI;AACF,aAAO,KAAK,MAAM,MAAM,IAAI;AAAA,IAC9B,SAAS,GAAG;AACV,cAAQ,MAAM,sBAAsB,MAAM,IAAI;AAC9C,aAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,QAAQ,SAAS,OAAO,eAAe,CAAC,EAAE;AAAA,IAC7F;AAEA,UAAM,EAAE,OAAO,IAAI;AACnB,QAAI,CAAC,QAAQ;AACX,aAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,QAAQ,SAAS,OAAO,iBAAiB,CAAC,EAAE;AAAA,IAC/F;AAGA,UAAM,SAAS;AACf,UAAM,SAAS,QAAQ,IAAI,eAAe;AAE1C,YAAQ,IAAI,kBAAkB,QAAQ,wBAAwB,OAAO,MAAM,EAAE,MAAM,GAAG,GAAG,CAAC;AAC1F,UAAM,UAAU,EAAE,gBAAgB,mBAAmB;AACrD,QAAI,OAAQ,SAAQ,eAAe,IAAI,UAAU,MAAM;AAEvD,UAAM,SAAS,MAAM,MAAM,QAAQ;AAAA,MACjC,QAAQ;AAAA,MACR;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,SAAS,OAAO,CAAC;AAAA,IAC1C,CAAC;AAGD,UAAM,OAAO,MAAM,OAAO,KAAK;AAC/B,YAAQ,IAAI,oBAAoB,OAAO,QAAQ,iBAAiB,KAAK,MAAM,GAAG,GAAI,CAAC;AAEnF,QAAI;AACJ,QAAI;AACF,WAAK,KAAK,MAAM,IAAI;AAAA,IACtB,QAAQ;AAEN,aAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,QAAQ,SAAS,OAAO,8BAA8B,KAAK,KAAK,MAAM,GAAG,GAAI,EAAE,CAAC,EAAE;AAAA,IACrI;AAGA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE;AAAA,IACzB;AAAA,EAEF,SAAS,KAAK;AACZ,YAAQ,MAAM,gBAAgB,GAAG;AACjC,WAAO,EAAE,YAAY,KAAK,MAAM,KAAK,UAAU,EAAE,QAAQ,SAAS,OAAO,OAAO,GAAG,EAAE,CAAC,EAAE;AAAA,EAC1F;AACF;",
  "names": []
}
